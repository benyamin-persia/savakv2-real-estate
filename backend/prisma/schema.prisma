// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String?
  firstName String?
  lastName  String?
  name      String?
  avatar    String?
  bio       String?
  location  Json?    // GeoJSON object: { type: "Point", coordinates: [lng, lat] }
  phone     String?
  website   String?
  social    Json?    // { twitter, linkedin, instagram }
  googleId  String?  @unique
  microsoftId String? @unique
  isVerified Boolean @default(false)
  isAdmin   Boolean @default(false)
  isActive  Boolean @default(true)
  role      String?  @default("regular")
  userType  String   @default("regular") // regular, advanced, admin, shadow
  authProvider String?
  dailyPostCount Int @default(0)
  lastPostReset DateTime @default(now())
  maxDailyPosts Int @default(5)
  lastActive DateTime @default(now())
  preferences Json?  // { notifications: { email: boolean, push: boolean }, privacy: { profileVisible: boolean, showLocation: boolean } }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  listings Listing[]
  comments Comment[]
  chatParticipants ChatParticipant[]
  messages Message[]
  favorites Favorite[]

  @@map("users")
}

model Listing {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String   // "artist", "developer", "designer", etc.
  location    String
  coordinates Json     // { lat: number, lng: number }
  images      String[] // Array of image URLs
  price       Float?
  contact     Json     // { email, phone, website }
  features    String[] // Array of features
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  views       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  favorites Favorite[]

  @@map("listings")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  rating    Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  participants ChatParticipant[]
  messages     Message[]

  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  joinedAt  DateTime @default(now())
  isAdmin   Boolean  @default(false)

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_participants")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  type      String   @default("text") // text, image, file
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  userId    String @db.ObjectId
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId String @db.ObjectId
  listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@map("favorites")
}

model PersonType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("person_types")
} 